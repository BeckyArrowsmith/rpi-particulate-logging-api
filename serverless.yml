service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local

custom:
  tableName: 'logs-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerisePip: non-linux
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
      - prod

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
         - { "Fn::GetAtt": ["LogsTableDynamoDBTable", "Arn" ] }
  environment:
    LOGS_TABLE: ${self:custom.tableName}
  apiKeys:
  - ${self:provider.stage}-apiKey
  usagePlan:
  quota:
    limit: 1000
    offset: 2
    period: MONTH
  throttle:
    burstLimit: 100
    rateLimit: 10



functions:
  app: 
    handler: wsgi_handler.handler
    events:
      - http: 
          path: /
          method: any 
          private: true
      - http: 
          path: /{proxy+}
          method: any
          private: true 
    # getLog:
    #   handler: wsgi_handler.handler
    #   events:
    #     - http:
    #       path: /logs
    #       method: get
    #       private: true
    # createLog:
    #   handler: wsgi_handler.handler
    #   events:
    #     - http: 
    #         path: /logs
    #         method: post
    #         private: true

resources:
  Resources:
    LogsTableDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: logId
            AttributeType: S
        KeySchema:
         - 
          AttributeName: logId
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}